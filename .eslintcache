[{"/home/hope/Documents/offbeatinsights/src/index.js":"1","/home/hope/Documents/offbeatinsights/src/App.js":"2","/home/hope/Documents/offbeatinsights/src/NewDataForm.js":"3","/home/hope/Documents/offbeatinsights/src/utils/TextInputField.js":"4","/home/hope/Documents/offbeatinsights/src/utils/ListInputField.js":"5","/home/hope/Documents/offbeatinsights/src/utils/InteractiveTable.js":"6","/home/hope/Documents/offbeatinsights/src/Navigation.js":"7","/home/hope/Documents/offbeatinsights/src/Header.js":"8","/home/hope/Documents/offbeatinsights/src/NavigationContext.js":"9"},{"size":520,"mtime":1614024930681,"results":"10","hashOfConfig":"11"},{"size":1238,"mtime":1614150362502,"results":"12","hashOfConfig":"11"},{"size":2506,"mtime":1613980850821,"results":"13","hashOfConfig":"11"},{"size":1922,"mtime":1613211284647,"results":"14","hashOfConfig":"11"},{"size":2238,"mtime":1613211220324,"results":"15","hashOfConfig":"11"},{"size":1717,"mtime":1613996565993,"results":"16","hashOfConfig":"11"},{"size":1905,"mtime":1614150362506,"results":"17","hashOfConfig":"11"},{"size":1015,"mtime":1614150362505,"results":"18","hashOfConfig":"11"},{"size":153,"mtime":1614150362512,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1bfr9io",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/hope/Documents/offbeatinsights/src/index.js",[],["43","44"],"/home/hope/Documents/offbeatinsights/src/App.js",["45"],"/home/hope/Documents/offbeatinsights/src/NewDataForm.js",["46","47"],"import React, { useState } from \"react\";\n\n// Project Components/Styles.\nimport TextInputField from \"./utils/TextInputField\";\nimport ListInputField from \"./utils/ListInputField\";\nimport InteractiveTable from \"./utils/InteractiveTable\";\nimport CSS from \"./NewDataForm.module.css\";\n\n// MaterialUI Components.\nimport Button from \"@material-ui/core/Button\";\n\n// FORM FOR ADDING A NEW NOTE.\nconst NewDataFormComponent = (props) => {\n  // states of the input fields.\n  const [topic, setTopic] = useState(\"\");\n  const [objective, setObjective] = useState(\"\");\n  const [section, setSection] = useState(\"\");\n  const [packageName, setPackageName] = useState(\"\");\n  const [pointers, setPointers] = useState([]);\n  const [records, setRecords] = useState([]);\n\n  return (\n    <React.Fragment>\n      <h2>Notes for {topic}</h2>\n      <div className={CSS.form}>\n        <form>\n          {/** Topic label and its input type=\"text\" field */}\n          <TextInputField\n            state={{ value: topic, setValue: setTopic }}\n            fieldname=\"Topic\"\n            css={CSS.wide}\n          />\n\n          {/** Objective label and its input type=\"text\" field */}\n          <TextInputField\n            state={{ value: objective, setValue: setObjective }}\n            fieldname=\"Objective\"\n            css={CSS.wide}\n          />\n\n          {/** Section label and its input type=\"text\" field */}\n          <TextInputField\n            state={{ value: section, setValue: setSection }}\n            fieldname=\"Section\"\n            css={CSS.wide}\n          />\n\n          {/** Package label and its input type=\"text\" field */}\n          <TextInputField\n            state={{ value: packageName, setValue: setPackageName }}\n            fieldname=\"PackageName\"\n            css={CSS.wide}\n          />\n\n          {/** Pointers label and its input field */}\n          <ListInputField\n            state={{ value: pointers, setValue: setPointers }}\n            fieldname=\"Pointers\"\n            css={CSS.wide}\n          />\n\n          {/** Commands label and its input field */}\n          <InteractiveTable\n            heading=\"Command Summary\"\n            columns={[\"Tasks\", \"Command\", \"Ansible Equivalent\"]}\n          />\n\n          <p>\n            <Button color=\"primary\" type=\"submit\">\n              Submit Topic\n            </Button>\n            <Button color=\"primary\" type=\"reset\">\n              Reset\n            </Button>\n          </p>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default NewDataFormComponent;\n",["48","49"],"/home/hope/Documents/offbeatinsights/src/utils/TextInputField.js",["50"],"import React, { useEffect, useState } from \"react\";\n\nimport CSS from \"./TextInputField.module.css\";\n\n// MaterialUI Components.\nimport TextField from \"@material-ui/core/TextField\";\n\n// A simple text input field which is validated against the provided validator.\n// The validator is a function that returns either true or false for validity.\n\n// PROPERTIES\n// state: State reference (from parent form component) having the structure as\n// { value: fieldValue, setValue: function to update value}\n// fieldname: name/label of the field.\n// validator: function reference.\n// css (optional): CSS for the component.\nconst TextInputFieldComponent = (props) => {\n  const state = props.state;\n  const fieldName = props.fieldname;\n  const validator = props.validator;\n  const baseStyling = props.css ? [props.css] : [CSS.default];\n\n  // context provider which manages all the form data\n  // in which this component is attached.\n  const [isfieldValid, setFieldValidity] = useState(false);\n\n  // field is always valid in case no validation function is provided.\n  useEffect(() => {\n    validator === undefined ? setFieldValidity(true) : setFieldValidity(false);\n    console.log(isfieldValid);\n  }, [validator]);\n\n  // processing input field (including validation, if provided).\n  const processInputField = (event) => {\n    const newInputValue = event.target.value;\n    state.setValue(newInputValue);\n\n    // perform validation if a validation function is provided.\n    if (validator !== undefined) setFieldValidity(validator(newInputValue));\n  };\n\n  return (\n    <TextField\n      label={fieldName}\n      value={state.value}\n      variant=\"standard\"\n      // classes are not working.\n      className={\n        isfieldValid\n          ? [...baseStyling, CSS.valid_field].join(\" \")\n          : [...baseStyling, CSS.invalid_field].join(\" \")\n      }\n      onChange={processInputField}\n    />\n  );\n};\n\nexport default TextInputFieldComponent;\n","/home/hope/Documents/offbeatinsights/src/utils/ListInputField.js",["51"],"import React, { useState } from \"react\";\n\n// MaterialUI Components.\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\n// PROPERTIES\n// state: State reference (from parent form component) having the structure as\n// { value: fieldValue, setValue: function to update value}\n// fieldname: Label of the field.\n// desc: description/hint for each item field.\n// validator: function referrence which validates each input item.\n// css (optional): styling provided by the parent component.\nconst ListInputFieldComponent = (props) => {\n  const state = props.state;\n  const heading = props.fieldname ? props.fieldname : \"Pointers\";\n  const fieldHint = props.desc ? props.desc : \"Mention pointer\";\n  const validator = props.validator;\n  const baseStyling = props.css;\n\n  // stores the real-time value of a single list input field.\n  const [listItemValue, setListItemValue] = useState(\"\");\n  const updateListItemValue = (event) => {\n    const value = event.target.value;\n    setListItemValue(value);\n  };\n\n  // stores all the created list items (as state is defined in parent component).\n  const createListItem = () => {\n    // TODO: Validate the pointer body.\n    // saving the pointer at the last index.\n    const itemIndex = state.value.length;\n    const itemObj = { index: itemIndex, itemBody: listItemValue };\n    state.setValue([...state.value, itemObj]);\n    setListItemValue(\"\");\n  };\n\n  return (\n    <React.Fragment>\n      {/** All the finalized pointers are shown here **/}\n      <ul>\n        {state.value.map((itemObj) => {\n          return <li>{itemObj.itemBody}</li>;\n        })}\n      </ul>\n\n      {/** Pointers label and its input type=\"text\" field */}\n      <p className={CSS.topMarginOnly}>\n        <FormLabel>{heading}</FormLabel>\n      </p>\n      <TextField\n        className={baseStyling}\n        multiline\n        rowsMax=\"5\"\n        label={fieldHint}\n        variant=\"standard\"\n        onChange={updateListItemValue}\n        value={listItemValue}\n      />\n\n      <Button color=\"primary\" type=\"button\" onClick={createListItem}>\n        Add\n      </Button>\n    </React.Fragment>\n  );\n};\n\nexport default ListInputFieldComponent;\n","/home/hope/Documents/offbeatinsights/src/utils/InteractiveTable.js",[],"/home/hope/Documents/offbeatinsights/src/Navigation.js",["52","53"],"/home/hope/Documents/offbeatinsights/src/Header.js",[],"/home/hope/Documents/offbeatinsights/src/NavigationContext.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":17,"column":22,"nodeType":"60","messageId":"61","endLine":17,"endColumn":35},{"ruleId":"58","severity":1,"message":"62","line":20,"column":10,"nodeType":"60","messageId":"61","endLine":20,"endColumn":17},{"ruleId":"58","severity":1,"message":"63","line":20,"column":19,"nodeType":"60","messageId":"61","endLine":20,"endColumn":29},{"ruleId":"54","replacedBy":"64"},{"ruleId":"56","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":31,"column":6,"nodeType":"68","endLine":31,"endColumn":17,"suggestions":"69"},{"ruleId":"58","severity":1,"message":"70","line":19,"column":9,"nodeType":"60","messageId":"61","endLine":19,"endColumn":18},{"ruleId":"58","severity":1,"message":"71","line":7,"column":8,"nodeType":"60","messageId":"61","endLine":7,"endColumn":18},{"ruleId":"58","severity":1,"message":"72","line":12,"column":8,"nodeType":"60","messageId":"61","endLine":12,"endColumn":20},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'setNavOptions' is assigned a value but never used.","Identifier","unusedVar","'records' is assigned a value but never used.","'setRecords' is assigned a value but never used.",["73"],["74"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isfieldValid'. Either include it or remove the dependency array.","ArrayExpression",["75"],"'validator' is assigned a value but never used.","'Typography' is defined but never used.","'ListItemText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"76","fix":"77"},"Update the dependencies array to be: [isfieldValid, validator]",{"range":"78","text":"79"},[1185,1196],"[isfieldValid, validator]"]